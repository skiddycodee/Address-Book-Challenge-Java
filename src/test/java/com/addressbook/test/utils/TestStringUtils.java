package com.addressbook.test.utils;

import com.addressbook.app.utils.StringUtils;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class TestStringUtils {

    @Test
    public void testCheckIfInputNotNull() {
        assertFalse(StringUtils.contactInputQuarantine(null));
    }

    @Test
    public void testCheckIfInputNotEmpty() {
        assertFalse(StringUtils.contactInputQuarantine(""));
    }

    @Test
    public void testCheckIfInputNotWhitespace() {
        assertFalse(StringUtils.contactInputQuarantine(" "));
    }

    @Test
    public void testCheckIfPhoneNumberValid() {
        assertAll(
                //! Test cases for valid phone numbers are AI generated by ChatGPT
                //! AI was prompted with "Generate test cases for valid phone numbers"
                //! "I want x format, and to test this regex"

                //? Valid phone numbers
                () -> assertTrue(StringUtils.checkIfPhoneNumber("+1-800-555-5555")),
                () -> assertTrue(StringUtils.checkIfPhoneNumber("123-456-7890")),
                () -> assertTrue(StringUtils.checkIfPhoneNumber("(123) 456-7890")),
                () -> assertTrue(StringUtils.checkIfPhoneNumber("+44 20 7946 0958")),
                () -> assertTrue(StringUtils.checkIfPhoneNumber("+49 30 123456")),
                () -> assertTrue(StringUtils.checkIfPhoneNumber("020 7946 0958")),
                () -> assertTrue(StringUtils.checkIfPhoneNumber("0800 1111")),
                () -> assertTrue(StringUtils.checkIfPhoneNumber("+91-9876543210")),
                () -> assertTrue(StringUtils.checkIfPhoneNumber("9876543210")),
                () -> assertTrue(StringUtils.checkIfPhoneNumber("123.456.7890")),
                () -> assertTrue(StringUtils.checkIfPhoneNumber("+61 2 1234 5678")),
                () -> assertTrue(StringUtils.checkIfPhoneNumber("031-123-4567")),
                () -> assertTrue(StringUtils.checkIfPhoneNumber("123-4567")),
                () -> assertTrue(StringUtils.checkIfPhoneNumber("+33 1 23 45 67 89")),
                () -> assertTrue(StringUtils.checkIfPhoneNumber("+34 912 34 56 78")),
                () -> assertTrue(StringUtils.checkIfPhoneNumber("555-1234")),
                () -> assertTrue(StringUtils.checkIfPhoneNumber("+1 (800) 123-4567")),
                () -> assertTrue(StringUtils.checkIfPhoneNumber("+44 (0) 20 7946 0958")),
                () -> assertTrue(StringUtils.checkIfPhoneNumber("0800-123-4567")),
                () -> assertTrue(StringUtils.checkIfPhoneNumber("123 456 7890")),

                //? Invalid phone numbers
                () -> assertFalse(StringUtils.checkIfPhoneNumber("plainstring")),
                () -> assertFalse(StringUtils.checkIfPhoneNumber("phone:123-456-7890")), // Invalid: contains letters
                () -> assertFalse(StringUtils.checkIfPhoneNumber("123-456-789A")), // Invalid: contains letter at end
                () -> assertFalse(StringUtils.checkIfPhoneNumber("123/456-7890")), // Invalid: wrong delimiter
                () -> assertFalse(StringUtils.checkIfPhoneNumber("++1-800-555-5555")), // Invalid: double plus
                () -> assertFalse(StringUtils.checkIfPhoneNumber("123-456-7890-")), // Invalid: trailing dash
                () -> assertFalse(StringUtils.checkIfPhoneNumber("123--456-7890")), // Invalid: double dash
                () -> assertFalse(StringUtils.checkIfPhoneNumber(" 123-456-7890")), // Invalid: leading space
                () -> assertFalse(StringUtils.checkIfPhoneNumber("123-456-7890 ")), // Invalid: trailing space
                () -> assertFalse(StringUtils.checkIfPhoneNumber("123.456..7890")), // Invalid: double dot
                () -> assertFalse(StringUtils.checkIfPhoneNumber("123--456--7890")), // Invalid: double dash
                () -> assertFalse(StringUtils.checkIfPhoneNumber("+44-20--7946-0958")), // Invalid: double dash
                () -> assertFalse(StringUtils.checkIfPhoneNumber("123-456-7890x1234")) // Invalid: extension
        );
    }

    @Test
    public void testCheckIfEmailValid() {
        assertAll(
                //! Test cases for valid emails are AI generated by ChatGPT
                //! AI was prompted with "Generate test cases for valid emails"
                //! "I want x format, and to test this regex"

                //? Valid email addresses
                () -> assertTrue(StringUtils.checkIfEmail("example@example.com")),
                () -> assertTrue(StringUtils.checkIfEmail("user.name@domain.co.in")),
                () -> assertTrue(StringUtils.checkIfEmail("user+name@domain.com")),
                () -> assertTrue(StringUtils.checkIfEmail("user_name@domain.com")),
                () -> assertTrue(StringUtils.checkIfEmail("username@sub.domain.com")),
                () -> assertTrue(StringUtils.checkIfEmail("username@domain.co")),
                () -> assertTrue(StringUtils.checkIfEmail("username@domain.email")),
                () -> assertTrue(StringUtils.checkIfEmail("username123@domain.org")),
                () -> assertTrue(StringUtils.checkIfEmail("user.name@domain.name")),
                () -> assertTrue(StringUtils.checkIfEmail("user-name@domain.com")),
                () -> assertTrue(StringUtils.checkIfEmail("user@domain.museum")),
                () -> assertTrue(StringUtils.checkIfEmail("user@domain.info")),
                () -> assertTrue(StringUtils.checkIfEmail("user@domain.biz")),
                () -> assertTrue(StringUtils.checkIfEmail("user@domain.tv")),
                () -> assertTrue(StringUtils.checkIfEmail("user@domain.gov")),
                () -> assertTrue(StringUtils.checkIfEmail("user@domain.edu")),
                () -> assertTrue(StringUtils.checkIfEmail("user@domain.net")),
                () -> assertTrue(StringUtils.checkIfEmail("user@domain.io")),
                () -> assertTrue(StringUtils.checkIfEmail("user@domain.ai")),
                () -> assertTrue(StringUtils.checkIfEmail("user@domain.xyz")),

                //? Invalid email addresses
                () -> assertFalse(StringUtils.checkIfEmail("plainaddress")),
                () -> assertFalse(StringUtils.checkIfEmail("@missingusername.com")), // Invalid: missing username
                () -> assertFalse(StringUtils.checkIfEmail("username@.com")), // Invalid: missing domain name
                () -> assertFalse(StringUtils.checkIfEmail("username@com")), // Invalid: missing top level domain
                () -> assertFalse(StringUtils.checkIfEmail("username@domain.c")), // Invalid: top level domain too short
                () -> assertFalse(StringUtils.checkIfEmail("username@domain..com")), // Invalid: double dot in domain
                () -> assertFalse(StringUtils.checkIfEmail("username@domain,com")), // Invalid: comma instead of dot
                () -> assertFalse(StringUtils.checkIfEmail("username@domain@domain.com")), // Invalid: double @
                () -> assertFalse(StringUtils.checkIfEmail(".username@domain.com")), // Invalid: leading dot in username
                () -> assertFalse(StringUtils.checkIfEmail("username@domain.com.")), // Invalid: trailing dot
                () -> assertFalse(StringUtils.checkIfEmail("username@domain..com")), // Invalid: double dot in domain
                () -> assertFalse(StringUtils.checkIfEmail("user name@domain.com")), // Invalid: space in username
                () -> assertFalse(StringUtils.checkIfEmail("username@domain.com ")), // Invalid: trailing space
                () -> assertFalse(StringUtils.checkIfEmail(" username@domain.com")), // Invalid: leading space
                () -> assertFalse(StringUtils.checkIfEmail("username@domain..com")), // Invalid: double dot in domain
                () -> assertFalse(StringUtils.checkIfEmail("username@domain.corporate")), // Invalid: top level domain too long
                () -> assertFalse(StringUtils.checkIfEmail("username@-domain.com")), // Invalid: leading dash in domain
                () -> assertFalse(StringUtils.checkIfEmail("username@domain-.com")) // Invalid: trailing dash in domain
        );
    }

    @Test
    public void testCheckIfNameValid() {
        assertAll(
                //! Test cases for valid names are AI generated by ChatGPT
                //! AI was prompted with "Generate test cases for valid names"
                //! "I want x format, and expect a name to not contain x regex pattern"

                //? Valid names
                () -> assertTrue(StringUtils.checkIfName("John Doe")),
                () -> assertTrue(StringUtils.checkIfName("Jane Smith")),
                () -> assertTrue(StringUtils.checkIfName("Alice Johnson")),
                () -> assertTrue(StringUtils.checkIfName("Bob Brown")),
                () -> assertTrue(StringUtils.checkIfName("Charlie Davis")),
                () -> assertTrue(StringUtils.checkIfName("David Evans")),
                () -> assertTrue(StringUtils.checkIfName("Eva Green")),
                () -> assertTrue(StringUtils.checkIfName("Frank Harris")),
                () -> assertTrue(StringUtils.checkIfName("Grace Lee")),
                () -> assertTrue(StringUtils.checkIfName("Henry Martinez")),
                () -> assertTrue(StringUtils.checkIfName("Ivy Nelson")),
                () -> assertTrue(StringUtils.checkIfName("Jack O'Brien")),
                () -> assertTrue(StringUtils.checkIfName("Katie Peterson")),
                () -> assertTrue(StringUtils.checkIfName("Liam Quinn")),
                () -> assertTrue(StringUtils.checkIfName("Mona Roberts")),
                () -> assertTrue(StringUtils.checkIfName("Nate Smith")),
                () -> assertTrue(StringUtils.checkIfName("Olivia Turner")),
                () -> assertTrue(StringUtils.checkIfName("Paul Walker")),
                () -> assertTrue(StringUtils.checkIfName("Quincy Young")),
                () -> assertTrue(StringUtils.checkIfName("Rachel Zane"))
        );
    }
}